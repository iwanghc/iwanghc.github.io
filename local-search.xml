<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>索引优化建议</title>
    <link href="/2025/10/31/index-optimization/"/>
    <url>/2025/10/31/index-optimization/</url>
    
    <content type="html"><![CDATA[<p>关于索引优化建议的一些总结，持续维护中，不一定百分百有效，但是基本上都合理</p><span id="more"></span><h2 id="关于索引建议"><a href="#关于索引建议" class="headerlink" title="关于索引建议"></a>关于索引建议</h2><ol><li>索引并不是越多越好，索引过多会给dml带来负担，一张表中的索引不超过5个</li><li>通常索引字段顺序为谓词列（加速检索）-&gt;排序&#x2F;分组列（消除临时表和文件排序）-&gt;关联列（消除块嵌套循环）-&gt;select列（覆盖索引时使用）<ul><li>等值条件列中要求选择性高的列在左</li><li>复合索引中仅能包含1个选择性最高的范围列，因为范围列会导致后续列索引失效，包括排序&#x2F;分组列（BETWEEN AND 列不会导致后续列索引失效）</li><li>索引要在被驱动表上的关联列上，解决块嵌套循环问题</li></ul></li><li>在InnoDB中，二级索引末尾会自动附加一个主键，所以一般情况下是不需要在创建索引中显示的添加主键字段，但是如果为了优化排序&#x2F;分组 (ORDER BY &#x2F; GROUP BY): 当需要的排序顺序与“主键自动附加在末尾”得到的顺序不一致时，就必须在索引定义中显式地包含主键，并把它放在正确的位置，以强制规定索引的物理排序。</li><li>索引的建议和数据分布有极强的关系，单纯通过ddl和explain来确定dql索引，很有可能是不生效的索引，优化的原则是减少io次数，根据数据分布确认最佳索引组合</li><li>隐式类型转换不一定导致索引失效，索引失效的前提是在索引列上进行转换，比如：int &#x3D; ‘123’ 可能不会导致索引失效，因为MySQL的默认转换规则是将字符串转为数字。</li><li>utf8mb4向下兼容utf8，如果驱动表(列)为utf8，被驱动表(列)为utf8mb4，是不存在隐式转换的，反之则需要隐式转换</li><li>并非一定不能再函数或计算列上创建索引，要考虑覆盖索引的情况</li><li>LIKE 前模糊和前后模糊会导致索引失效，右模糊不会，因为可以利用索引从左往右匹配的，如果不能避免前模糊可以考虑全文索引</li><li>ORDER BY ASC DESC 混合排序会导致索引失效</li><li>&#x3D; NULL 会导致索引失效，IS NULL 不会导致索引失效</li><li>驱动表和被驱动表的选择需要结合Where条件来确定，数据量小的是驱动表，可以结合执行计划来区分驱动表和被驱动表，执行计划中相同ID驱动表在前，被驱动表在后</li><li>关联查询中，在被驱动表的关联列上创建索引后，可能驱动表和被驱动表会转换</li></ol>]]></content>
    
    
    <categories>
      
      <category>SQL调优</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>规范</tag>
      
      <tag>索引</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MCP Google Web Search</title>
    <link href="/2025/08/13/mcp_web_search/"/>
    <url>/2025/08/13/mcp_web_search/</url>
    
    <content type="html"><![CDATA[<p>一个基于 Playwright 的 Python 工具，能够绕过搜索引擎的反爬虫机制，执行 Google 搜索并提取结果。它可作为命令行工具直接使用，或通过 Model Context Protocol (MCP) 服务器为模型提供实时搜索能力。</p><span id="more"></span><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/iwanghc/mcp_web_search">点击跳转 MCP Google Web Search GitHub源码获取工具</a></p><h3 id="核心亮点"><a href="#核心亮点" class="headerlink" title="核心亮点"></a>核心亮点</h3><ul><li><strong>本地化 SERP API 替代方案</strong>：无需依赖付费的搜索引擎结果 API 服务，完全在本地执行搜索操作</li><li><strong>先进的反机器人检测绕过技术</strong>：<ul><li>智能浏览器指纹管理，模拟真实用户行为</li><li>自动保存和恢复浏览器状态，减少验证频率</li><li>无头&#x2F;有头模式智能切换，遇到验证时自动转为有头模式让用户完成验证</li><li>多种设备和区域设置随机化，降低被检测风险</li></ul></li><li><strong>原始HTML获取</strong>：能够获取搜索结果页面的原始HTML（已移除CSS和JavaScript），用于分析和调试Google页面结构变化时的提取策略</li><li><strong>网页截图功能</strong>：在保存HTML内容的同时，自动捕获并保存完整网页截图</li><li><strong>MCP 服务器集成</strong>：为 Claude 等 AI 助手提供实时搜索能力，无需额外 API 密钥</li><li><strong>完全开源免费</strong>：所有代码开源，无使用限制，可自由定制和扩展</li><li><strong>Python原生</strong>：使用Python构建，提供更好的性能和更容易的部署</li></ul><h3 id="技术特性"><a href="#技术特性" class="headerlink" title="技术特性"></a>技术特性</h3><ul><li><strong>使用 Python 3.8+ 开发</strong>，提供优秀的性能和广泛的兼容性</li><li>基于 <strong>Playwright</strong> 实现浏览器自动化，支持多种浏览器引擎</li><li>支持命令行参数输入搜索关键词</li><li><strong>MCP 服务器支持</strong>，为 Claude 等 AI 助手提供搜索能力</li><li>返回搜索结果的标题、链接和摘要</li><li>支持获取搜索结果页面的原始HTML用于分析</li><li>以 JSON 格式输出结果</li><li>支持无头模式和有头模式（调试用）</li><li>提供详细的日志输出</li><li>健壮的错误处理机制</li><li>支持保存和恢复浏览器状态，有效避免反机器人检测</li><li><strong>多层反爬虫保护机制</strong></li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接使用命令行</span><br>python cli.py <span class="hljs-string">&quot;搜索关键词&quot;</span><br><br><span class="hljs-comment"># 使用命令行选项</span><br>python cli.py --<span class="hljs-built_in">limit</span> 5 --<span class="hljs-built_in">timeout</span> 30000 <span class="hljs-string">&quot;搜索关键词&quot;</span><br><br><span class="hljs-comment"># 获取搜索结果页面的原始HTML</span><br>python cli.py --get-html <span class="hljs-string">&quot;搜索关键词&quot;</span><br><br><span class="hljs-comment"># 获取HTML并保存到文件</span><br>python cli.py --get-html --save-html <span class="hljs-string">&quot;搜索关键词&quot;</span><br></code></pre></td></tr></table></figure><h4 id="MCP服务器"><a href="#MCP服务器" class="headerlink" title="MCP服务器"></a>MCP服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在dotenv.env配置模型API KEY等信息</span><br><span class="hljs-comment"># 使用MCP客户端</span><br>python -m mcp_integration.client<br></code></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>以查询上海当天天气为例</p><h4 id="MCP服务器-1"><a href="#MCP服务器-1" class="headerlink" title="MCP服务器"></a>MCP服务器</h4><p>这里使用deepseek v3作为客户端模型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs bash">(llmtool) PS D:\Ai\web_agent\google-search-main&gt; python -m mcp_integration.client<br>✅ 已连接到Google搜索MCP服务器 / Connected to Google Search MCP Server<br><br>🚀 Google搜索增强版MCP客户端已启动! / Google Search Enhanced MCP Client Started!<br>💡 现在你可以询问任何需要实时信息的问题 / You can now ask any questions that require real-time information<br>🔍 系统会自动使用Google搜索来获取最新信息 / The system will automatically use Google Search to get the latest information<br>🛡️ 已启用反爬虫保护机制 / Anti-bot protection mechanism enabled<br>❓ 输入 <span class="hljs-string">&#x27;quit&#x27;</span> 退出程序 / Type <span class="hljs-string">&#x27;quit&#x27;</span> to <span class="hljs-built_in">exit</span> the program<br><br><br>🤔 请输入你的问题 / Please enter your question: 今天上海的天气<br><br>⏳ 正在处理你的问题... / Processing your question...<br>🔧 可用工具: [<span class="hljs-string">&#x27;google-search&#x27;</span>, <span class="hljs-string">&#x27;get-webpage-html&#x27;</span>] / Available tools: [<span class="hljs-string">&#x27;google-search&#x27;</span>, <span class="hljs-string">&#x27;get-webpage-html&#x27;</span>]<br><br>🔍 正在执行工具: google-search / Executing tool: google-search<br>📝 Parameters: &#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;今天上海的天气&quot;</span><br>&#125;<br>📊 工具执行结果长度: 817 字符 / Tool execution result length: 817 characters<br>🤔 请输入你的问题 / Please enter your question: 今天上海的天气<br><br>⏳ 正在处理你的问题... / Processing your question...<br>🔧 可用工具: [<span class="hljs-string">&#x27;google-search&#x27;</span>, <span class="hljs-string">&#x27;get-webpage-html&#x27;</span>] / Available tools: [<span class="hljs-string">&#x27;google-search&#x27;</span>, <span class="hljs-string">&#x27;get-webpage-html&#x27;</span>]<br><br>🔍 正在执行工具: google-search / Executing tool: google-search<br>📝 Parameters: &#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;今天上海的天气&quot;</span><br>&#125;<br>📊 工具执行结果长度: 817 字符 / Tool execution result length: 817 characters<br>🔍 正在执行工具: google-search / Executing tool: google-search<br>📝 Parameters: &#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;今天上海的天气&quot;</span><br>&#125;<br>📊 工具执行结果长度: 817 字符 / Tool execution result length: 817 characters<br>  <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;今天上海的天气&quot;</span><br>&#125;<br>📊 工具执行结果长度: 817 字符 / Tool execution result length: 817 characters<br>📊 工具执行结果长度: 817 字符 / Tool execution result length: 817 characters<br>🤖 正在生成最终回答... / Generating final answer...<br><br>🤖 AI回答 / AI Answer:<br>根据最新的天气预报，今天上海（8月15日）的天气情况如下：<br><br>- **天气状况**：多云，可能有阵雨。<br>- **温度范围**：28℃～35℃（部分预报显示最高可达36℃）。<br>- **风向风力**：东南风，风力4-5级。<br>- **湿度与体感**：湿度较高，体感闷热，需注意防暑降温。<br><br>建议外出时携带雨具，并做好防晒和补水措施。如需更详细的实时更新，可以参考[上海气象局官网](http://sh.cma.gov.cn)或[中国天气网](https://www.weather.com.cn)。<br><br>（注：不同平台预报可能存在细微差异，请以实时数据为准。）<br><br>🤔 请输入你的问题 / Please enter your question:<br></code></pre></td></tr></table></figure><h4 id="使用命令行工具"><a href="#使用命令行工具" class="headerlink" title="使用命令行工具"></a>使用命令行工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) PS D:\Ai\web_agent\google-search-main&gt; python  .\cli.py <span class="hljs-string">&quot;上海天气&quot;</span> -l 3<br>2025-08-13 18:39:46 [INFO] 正在初始化浏览器... 选项: <span class="hljs-built_in">limit</span>=3, <span class="hljs-built_in">timeout</span>=30000, stateFile=./browser-state.json, noSaveState=False, locale=zh-CN<br>2025-08-13 18:39:46 [INFO] 发现浏览器状态文件，将使用保存的浏览器状态以避免反机器人检测: ./browser-state.json<br>2025-08-13 18:39:46 [INFO] 已加载保存的浏览器指纹配置<br>2025-08-13 18:39:46 [INFO] 准备以无头模式启动浏览器...<br>2025-08-13 18:39:46 [INFO] 准备以无头模式启动浏览器...<br>2025-08-13 18:39:48 [INFO] 浏览器已成功启动!<br>2025-08-13 18:39:48 [INFO] 使用保存的浏览器指纹配置<br>2025-08-13 18:39:48 [INFO] 正在加载保存的浏览器状态...<br>2025-08-13 18:39:49 [INFO] 使用保存的Google域名: https://www.google.ca<br>2025-08-13 18:39:49 [INFO] 正在访问Google搜索页面...<br>2025-08-13 18:39:52 [INFO] 正在输入搜索关键词: 上海天气<br>2025-08-13 18:39:52 [INFO] 找到搜索框: textarea[name=<span class="hljs-string">&#x27;q&#x27;</span>]<br>2025-08-13 18:39:53 [INFO] 已输入搜索关键词: 上海天气<br>2025-08-13 18:39:53 [INFO] 尝试方式1：按回车键执行搜索<br>2025-08-13 18:39:53 [INFO] 回车键搜索执行完成<br>2025-08-13 18:39:53 [INFO] 搜索执行完成，等待页面加载<br>2025-08-13 18:39:53 [INFO] 页面加载中...<br>2025-08-13 18:39:56 [INFO] 页面加载完成后的最终URL: https://www.google.com/search?q=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;sca_esv=827ca067cae54b45&amp;<span class="hljs-built_in">source</span>=hp&amp;ei=dWucaNPjDtOOvr0PksLiiAw&amp;iflsig=AOw8s4IAAAAAaJx5hQiAX9rhuX69Uct8CmWVqRzJNKy_&amp;ved=0ahUKEwiT8ra1zIePAxVTh68BHRKhGMEQ4dUDCA0&amp;uact=5&amp;oq=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;gs_lp=Egdnd3Mtd2l6IgzkuIrmtbflpKnmsJQyChAAGIAEGEMYigUyChAAGIAEGEMYigUyBRAAGIAEMgoQABiABBhDGIoFMgoQABiABBhDGIoFMgUQABiABDILEC4YgAQYxwEYrwEyBRAAGIAEMgUQABiABDIFEAAYgARIwQtQ-gZY1gdwAXgAkAEAmAGNAaABlQSqAQMwLjS4AQPIAQD4AQGYAgWgAqUEqAIKwgIaEAAYgAQYtAIY1AMY5QIYtwMYigUY6gIYigPCAgoQLhiABBhDGIoFwgIUEC4YgAQYxwEYmAUYmQUYngUYrwGYAwbxBX1VgDr52RiXkgcDMS40oAfHILIHAzAuNLgHnwTCBwUwLjQuMcgHDA&amp;sclient=gws-wiz<br>2025-08-13 18:39:56 [INFO] 搜索执行后的URL检查: https://www.google.com/search?q=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;sca_esv=827ca067cae54b45&amp;<span class="hljs-built_in">source</span>=hp&amp;ei=dWucaNPjDtOOvr0PksLiiAw&amp;iflsig=AOw8s4IAAAAAaJx5hQiAX9rhuX69Uct8CmWVqRzJNKy_&amp;ved=0ahUKEwiT8ra1zIePAxVTh68BHRKhGMEQ4dUDCA0&amp;uact=5&amp;oq=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;gs_lp=Egdnd3Mtd2l6IgzkuIrmtbflpKnmsJQyChAAGIAEGEMYigUyChAAGIAEGEMYigUyBRAAGIAEMgoQABiABBhDGIoFMgoQABiABBhDGIoFMgUQABiABDILEC4YgAQYxwEYrwEyBRAAGIAEMgUQABiABDIFEAAYgARIwQtQ-gZY1gdwAXgAkAEAmAGNAaABlQSqAQMwLjS4AQPIAQD4AQGYAgWgAqUEqAIKwgIaEAAYgAQYtAIY1AMY5QIYtwMYigUY6gIYigPCAgoQLhiABBhDGIoFwgIUEC4YgAQYxwEYmAUYmQUYngUYrwGYAwbxBX1VgDr52RiXkgcDMS40oAfHILIHAzAuNLgHnwTCBwUwLjQuMcgHDA&amp;sclient=gws-wiz, query: 上海天气<br>2025-08-13 18:39:56 [INFO] 正在等待搜索结果加载... URL: https://www.google.com/search?q=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;sca_esv=827ca067cae54b45&amp;<span class="hljs-built_in">source</span>=hp&amp;ei=dWucaNPjDtOOvr0PksLiiAw&amp;iflsig=AOw8s4IAAAAAaJx5hQiAX9rhuX69Uct8CmWVqRzJNKy_&amp;ved=0ahUKEwiT8ra1zIePAxVTh68BHRKhGMEQ4dUDCA0&amp;uact=5&amp;oq=%E4%B8%8A%E6%B5%B7%E5%A4%A9%E6%B0%94&amp;gs_lp=Egdnd3Mtd2l6IgzkuIrmtbflpKnmsJQyChAAGIAEGEMYigUyChAAGIAEGEMYigUyBRAAGIAEMgoQABiABBhDGIoFMgoQABiABBhDGIoFMgUQABiABDILEC4YgAQYxwEYrwEyBRAAGIAEMgUQABiABDIFEAAYgARIwQtQ-gZY1gdwAXgAkAEAmAGNAaABlQSqAQMwLjS4AQPIAQD4AQGYAgWgAqUEqAIKwgIaEAAYgAQYtAIY1AMY5QIYtwMYigUY6gIYigPCAgoQLhiABBhDGIoFwgIUEC4YgAQYxwEYmAUYmQUYngUYrwGYAwbxBX1VgDr52RiXkgcDMS40oAfHILIHAzAuNLgHnwTCBwUwLjQuMcgHDA&amp;sclient=gws-wiz<br>2025-08-13 18:39:56 [INFO] 尝试等待选择器: <span class="hljs-comment">#search</span><br>2025-08-13 18:39:56 [INFO] 找到搜索结果: <span class="hljs-comment">#search, 尝试次数: 1</span><br>2025-08-13 18:39:56 [INFO] 正在提取搜索结果...<br>2025-08-13 18:39:56 [INFO] 成功获取到搜索结果: 3 条<br>2025-08-13 18:39:56 [INFO] 正在保存浏览器状态: ./browser-state.json<br>2025-08-13 18:39:56 [INFO] 浏览器状态保存成功!<br>2025-08-13 18:39:56 [INFO] 指纹配置已保存: ./browser-state-fingerprint.json<br>2025-08-13 18:39:56 [INFO] 正在关闭浏览器...<br>2025-08-13 18:39:57 [INFO] 浏览器已成功关闭<br>2025-08-13 18:39:57 [INFO] Playwright已成功停止<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;上海天气&quot;</span>,<br>  <span class="hljs-string">&quot;results&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;预报- 上海&quot;</span>,<br>      <span class="hljs-string">&quot;link&quot;</span>: <span class="hljs-string">&quot;https://www.weather.com.cn/weather/101020100.shtml&quot;</span>,<br>      <span class="hljs-string">&quot;snippet&quot;</span>: <span class="hljs-string">&quot;13日（今天）. 小雨. 28℃. 3-4级 · 14日（明天）. 阴. 36℃/28℃. 3-4级 · 15日（后天）. 阴. 35℃/28℃. 3-4级转&lt;3级 · 16日（周六）. 阴. 35℃/28℃. 3-4级转&lt;3级 · 17日（周日）. 阴. 35 ...&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;中国气象局-天气预报-城市预报- 上海&quot;</span>,<br>      <span class="hljs-string">&quot;link&quot;</span>: <span class="hljs-string">&quot;https://weather.cma.cn/web/weather/58367.html&quot;</span>,<br>      <span class="hljs-string">&quot;snippet&quot;</span>: <span class="hljs-string">&quot;风向 · 气压 · 湿度 ; 东南风 · 1010.1hPa · 80.1% ; 东南风 · 1010.5hPa · 64.5% ...&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;上海(Shanghai)(中国)の天気 - 日本気象協会 tenki.jp&quot;</span>,<br>      <span class="hljs-string">&quot;link&quot;</span>: <span class="hljs-string">&quot;https://tenki.jp/world/5/90/58362/&quot;</span>,<br>      <span class="hljs-string">&quot;snippet&quot;</span>: <span class="hljs-string">&quot;日付, 天気, 気温(℃), 湿度(％), 風速(m/s). 14日 (木), 晴. 33℃. 30℃. 73%. 7. 15日 (金), 晴. 33℃. 29℃. 72%. 6. 16日 (土), 晴. 33℃. 29℃.&quot;</span><br>    &#125;<br>  ]<br>&#125;<br>(base) PS D:\Ai\web_agent\google-search-main&gt; <br></code></pre></td></tr></table></figure><h3 id="搜索增强"><a href="#搜索增强" class="headerlink" title="搜索增强"></a>搜索增强</h3><p>也可以结合一些谷歌搜索运算符使用，提高查询结果的准确性和可信度，比如: <a href="https://developers.google.com/search/docs/monitor-debug/search-operators/all-search-site?hl=zh-cn">site: 搜索运算符</a>、双引号等</p><p>完！</p>]]></content>
    
    
    <categories>
      
      <category>AI大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
      <tag>MCP</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天才第一步：常用模型API参数</title>
    <link href="/2025/06/26/parameters/"/>
    <url>/2025/06/26/parameters/</url>
    
    <content type="html"><![CDATA[<p>天才第一步：常用模型API参数 temperature和top_p、top_k</p><span id="more"></span><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>以下是几个目前大语言模型常用的解码策略(一般在调用模型的API中可以设置)，请解释它们的基本原理及使用方式</p><p>贪心搜索 (Greedy search)、波束搜索 (Beam search)、Top-K 采样 (Top-K sampling) 以及 <em>Top-p 采样 (Top-p sampling)</em></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>不局限于以下，可以自己找</p><p><a href="https://huggingface.co/blog/how-to-generate">https://huggingface.co/blog/how-to-generate</a><br>top_p诞生的论文 <a href="https://ar5iv.labs.arxiv.org/html/1904.09751?_immersive_translate_auto_translate=1">https://ar5iv.labs.arxiv.org/html/1904.09751?_immersive_translate_auto_translate=1</a></p><ul><li>贪心搜索（Greedy Search）简单高效，每步选取概率最高的词，但易陷入局部最优；</li><li>波束搜索（Beam Search）在每步保留多个候选序列，通过宽度参数平衡质量与效率；</li><li>Top-K 采样（Top-K Sampling）在概率最高的 K 个词中随机采样，引入多样性；</li><li>Top-p 采样（Nucleus Sampling）动态截断词表至累积概率 ≥ p 的小词集，再随机采样，兼顾质量与创造性。</li></ul><p>它们的基本原理及常见 API 使用方式：</p><h3 id="贪心搜索（Greedy-Search）"><a href="#贪心搜索（Greedy-Search）" class="headerlink" title="贪心搜索（Greedy Search）"></a>贪心搜索（Greedy Search）</h3><p><strong>原理</strong><br>贪心搜索在每个时间步只选取概率最大的下一个 token，构成输出序列。这相当于对条件概率 <code>P(wt∣w&lt;t)P(w_t\mid w_{&lt;t})</code> 做一次局部最优选择，但可能错过全局最优路径，因为不回溯已选 token。 (<a href="https://huggingface.co/blog/mlabonne/decoding-strategies?utm_source=chatgpt.com">Hugging Face</a>)</p><p><strong>使用方式</strong><br>在调用大模型 API 时，将 num_beams&#x3D;1（或关闭 beam search）、do_sample&#x3D;false 即可启用贪心：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">response = model.generate(<br>    input_ids,<br>    max_length=<span class="hljs-number">50</span>,<br>    num_beams=<span class="hljs-number">1</span>,<br>    do_sample=<span class="hljs-literal">False</span><br>)<br></code></pre></td></tr></table></figure><p>此时每步仅取最高概率项，适合对确定性要求高、追求速度的场景。</p><p>(<a href="https://huggingface.co/blog/how-to-generate?utm_source=chatgpt.com">Hugging Face</a>, <a href="https://machinelearningmastery.com/beam-search-decoder-natural-language-processing/?utm_source=chatgpt.com">MachineLearningMastery.com</a>)</p><h3 id="波束搜索（Beam-Search）"><a href="#波束搜索（Beam-Search）" class="headerlink" title="波束搜索（Beam Search）"></a>波束搜索（Beam Search）</h3><p><strong>原理</strong><br>波束搜索是一种宽度受限的最优搜索策略，在每一步保留概率最高的 B 条候选序列（beam width&#x3D;B），扩展后再次截断至 B 条，最终选出整体概率最高的完整序列。它在贪心和穷举之间，通过 beam width 控制计算量与搜索空间。 (width.ai, Wikipedia)</p><p><strong>使用方式</strong><br>常见参数 <code>num_beams=B、early_stopping</code> 控制何时终止：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">response = model.generate(<br>    input_ids,<br>    max_length=<span class="hljs-number">50</span>,<br>    num_beams=<span class="hljs-number">5</span>,<br>    early_stopping=<span class="hljs-literal">True</span>,<br>    do_sample=<span class="hljs-literal">False</span><br>)<br></code></pre></td></tr></table></figure><ul><li>num_beams&#x3D;5：每步保留 5 条候选；</li><li>early_stopping&#x3D;True：一旦所有 beam 都生成结束符就停止。此法适合需要更高生成质量的机器翻译或摘要任务。</li><li><a href="https://huggingface.co/blog/how-to-generate?utm_source=chatgpt.com">Hugging Face</a>, <a href="https://machinelearningmastery.com/beam-search-decoder-natural-language-processing/?utm_source=chatgpt.com">MachineLearningMastery.com</a></li></ul><h3 id="Top-K-采样（Top-K-Sampling）"><a href="#Top-K-采样（Top-K-Sampling）" class="headerlink" title="Top-K 采样（Top-K Sampling）"></a>Top-K 采样（Top-K Sampling）</h3><p><strong>原理</strong><br>Top-K 采样在每步先将词表按概率降序，截取前 K 个最可能的 token 组成子集，再按原概率重归一化后随机采样一个 token。它在概率最高的 K 选项中引入随机性，提高输出多样性，同时避免极低概率词。 (<a href="https://rumn.medium.com/setting-top-k-top-p-and-temperature-in-llms-3da3a8f74832">Medium</a>, <a href="https://www.alphanome.ai/post/top-k-and-top-p-in-large-language-models-a-guide-for-investors?utm_source=chatgpt.com">Alphanome.AI</a>)</p><p><strong>使用方式</strong><br>设置 top_k&#x3D;K 并开启采样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">response = model.generate(<br>    input_ids,<br>    max_length=<span class="hljs-number">50</span>,<br>    do_sample=<span class="hljs-literal">True</span>,<br>    top_k=<span class="hljs-number">50</span>,<br>    top_p=<span class="hljs-number">1.0</span><br>)<br></code></pre></td></tr></table></figure><ul><li>top_k&#x3D;50：仅在前 50 个 token 中采样；</li><li>top_p&#x3D;1.0：关闭 nucleus 截断。适用于需要多样化但又有限度控制的对话生成。</li><li><a href="https://ivibudh.medium.com/a-guide-to-controlling-llm-model-output-exploring-top-k-top-p-and-temperature-parameters-ed6a31313910">Medium</a>, <a href="https://rumn.medium.com/setting-top-k-top-p-and-temperature-in-llms-3da3a8f74832">Medium</a></li></ul><h3 id="Top-p-采样（Nucleus-Sampling）"><a href="#Top-p-采样（Nucleus-Sampling）" class="headerlink" title="Top-p 采样（Nucleus Sampling）"></a>Top-p 采样（Nucleus Sampling）</h3><p><strong>原理</strong><br>Top-p 采样（又名 Nucleus Sampling）按概率降序累加所有 token 的概率，直到累积 ≥ p（如 0.9），将这组最小词集作为采样范围，再重归一化后随机选取。该方法动态调整候选集大小，能在保证总体概率质量的同时引入更多或更少的随机性。 (<a href="https://en.wikipedia.org/wiki/Top-p_sampling?utm_source=chatgpt.com">Wikipedia</a>, <a href="https://community.openai.com/t/a-better-explanation-of-top-p/2426?utm_source=chatgpt.com">OpenAI Community</a>)</p><p><strong>使用方式</strong><br>设置 top_p&#x3D;p 并开启采样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">response = model.generate(<br>    input_ids,<br>    max_length=<span class="hljs-number">50</span>,<br>    do_sample=<span class="hljs-literal">True</span>,<br>    top_k=<span class="hljs-number">0</span>,<br>    top_p=<span class="hljs-number">0.9</span><br>)<br></code></pre></td></tr></table></figure><ul><li>top_k&#x3D;0：关闭固定 K 截断；</li><li>top_p&#x3D;0.9：保留累积概率 ≥ 0.9 的最小词集。适合需要自然、多变但仍保持连贯性的创意写作。</li><li><a href="https://ivibudh.medium.com/a-guide-to-controlling-llm-model-output-exploring-top-k-top-p-and-temperature-parameters-ed6a31313910">Medium</a>, <a href="https://huyenchip.com/2024/01/16/sampling.html?utm_source=chatgpt.com">huyenchip.com</a></li></ul><h2 id="附加题："><a href="#附加题：" class="headerlink" title="附加题："></a>附加题：</h2><h3 id="请解释-温度-temperature-的基本原理及使用方式"><a href="#请解释-温度-temperature-的基本原理及使用方式" class="headerlink" title="请解释 温度(temperature) 的基本原理及使用方式"></a>请解释 温度(temperature) 的基本原理及使用方式</h3><p>在大语言模型（LLM）的随机采样（sampling）机制中，**温度（temperature）**是调节生成文本“随机性”与“确定性”的重要超参数。它直接作用于模型输出层的 <code>softmax</code> 公式，将原始 <code>logits ziz_i</code> 调整为：<br><code>P(wi)=exp⁡(zi/T)∑jexp⁡(zj/T)P(w_i)=\frac{\exp\bigl(z_i / T\bigr)}{\sum_j\exp\bigl(z_j / T\bigr)}</code><br>其中：</p><ul><li>ziz_i 是第 ii 个 token 的原始得分（logit）；</li><li>TT 为温度超参数；</li><li><code>P(wi)P(w_i)</code> 为温度调整后被采样到的概率。</li></ul><h3 id="温度的基本原理"><a href="#温度的基本原理" class="headerlink" title="温度的基本原理"></a>温度的基本原理</h3><ol><li>低温<code>（0&lt;T&lt;10&lt;T&lt;1）</code>→ “更确定”</li></ol><ul><li>当 <code>T&lt;1T&lt;1</code> 时，<code>exp⁡(zi/T)\exp(z_i/T)</code> 会放大奖励高 logit 的差异，概率分布“尖锐”化，最可能的 token 被进一步放大；</li><li>结果：模型更倾向于选择最高概率项，输出更稳定、重复率更高，接近贪心搜索行为。</li></ul><ol start="2"><li>常温<code>（T=1T=1）</code>→ “保持原状”</li></ol><ul><li><code>T=1T=1</code> 时，等同于普通 softmax，不做额外平滑或锐化；</li><li>输出随机性与训练时学到的分布一致。</li></ul><ol start="3"><li>高温<code>（T&gt;1T&gt;1）</code>→ “更随机”</li></ol><ul><li>当 <code>T&gt;1T&gt;1</code> 时，<code>exp⁡(zi/T)\exp(z_i/T)</code> 会“压平”各 token 之间的差异，低概率 token 机会被放大，概率分布更“扁平”；</li><li>结果：增加采样多样性，能生成更有创意但可能更不连贯或更易产生“幻觉”内容。</li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>在主流框架（如 Hugging Face Transformers、OpenAI API 等）中，温度通常以参数 temperature 或 temp 形式传入，且仅在 采样模式（do_sample&#x3D;True）下生效。</p><h4 id="Hugging-Face-Transformers-示例（Python）"><a href="#Hugging-Face-Transformers-示例（Python）" class="headerlink" title="Hugging Face Transformers 示例（Python）"></a>Hugging Face Transformers 示例（Python）</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, AutoTokenizer<br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>)<br>model     = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>)<br>outputs = model.generate(<br>    **tokenizer(<span class="hljs-string">&quot;写一段关于春天的诗：&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>),<br>    do_sample=<span class="hljs-literal">True</span>,        <span class="hljs-comment"># 开启采样</span><br>    temperature=<span class="hljs-number">0.7</span>,       <span class="hljs-comment"># 设置温度</span><br>    max_length=<span class="hljs-number">100</span>,<br>    top_p=<span class="hljs-number">0.9</span>,             <span class="hljs-comment"># 可同时搭配 nucleus 采样</span><br>)<br><span class="hljs-built_in">print</span>(tokenizer.decode(outputs[<span class="hljs-number">0</span>], skip_special_tokens=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h4 id="OpenAI-API-示例（JSON）"><a href="#OpenAI-API-示例（JSON）" class="headerlink" title="OpenAI API 示例（JSON）"></a>OpenAI API 示例（JSON）</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gpt-4o&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;messages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;role&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;user&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;帮我写一首关于大海的诗。&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;temperature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1.2</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">// 稍高温度以获取更有创意的表达</span><br>  <span class="hljs-attr">&quot;top_p&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.8</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 同时可配合 Top-p 使用</span><br>  <span class="hljs-attr">&quot;n&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="如何选取温度"><a href="#如何选取温度" class="headerlink" title="如何选取温度"></a>如何选取温度</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">温度范围特性典型场景<br><span class="hljs-number">0.0–0.3</span>极度确定、几近贪心事实性强、需精确答案（如代码生成、问答）<br><span class="hljs-number">0.4–0.8</span>适度随机、兼顾连贯与多样性对话、摘要、半开放式问答<br><span class="hljs-number">0.9–1.5</span>高随机、高创意文学创作、头脑风暴、诗歌生成<br>&gt;<span class="hljs-number">1</span>.<span class="hljs-number">5</span>极高多样性，易产生无关或幻觉实验性生成，不建议生产环境使用<br></code></pre></td></tr></table></figure><h3 id="与其他采样策略配合"><a href="#与其他采样策略配合" class="headerlink" title="与其他采样策略配合"></a>与其他采样策略配合</h3><ul><li><code>Top-K / Top-p</code> 采样：温度控制“全局”平滑度，<code>Top-K/Top-p</code> 控制“局部”候选集。二者可联合使用（如 temperature&#x3D;0.8, top_p&#x3D;0.9），但建议只调节一项以简化调优。</li><li>波束搜索：通常与采样（temperature）互斥，波束搜索不随机，若设 do_sample&#x3D;False，temperature 参数被忽略。</li></ul><p>小结</p><ul><li>温度 TT 通过调整 softmax “锐度”直接影响随机性；</li><li><code>T&lt;1T&lt;1</code> 更保守、<code>T&gt;1T&gt;1</code> 更发散；</li><li>配合 <code>do_sample=True</code> 使用，并可与 <code>Top-K/Top-p</code> 联合调优；</li><li>根据任务需求，在“准确性”与“创造性”间做权衡。</li></ul>]]></content>
    
    
    <categories>
      
      <category>AI大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天才第零步：大模型的前夜</title>
    <link href="/2025/06/26/night-before-the-big-model/"/>
    <url>/2025/06/26/night-before-the-big-model/</url>
    
    <content type="html"><![CDATA[<p>天才第零步：大模型的前夜</p><span id="more"></span><p>参考</p><ol><li><a href="https://github.com/microsoft/AI-System/blob/main/Textbook/%E7%AC%AC1%E7%AB%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/1.1-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%8E%86%E5%8F%B2%EF%BC%8C%E7%8E%B0%E7%8A%B6%E4%B8%8E%E5%8F%91%E5%B1%95.md">深度学习的历史，现状与发展</a></li><li><a href="https://github.com/ruanyf/weekly/blob/master/docs/issue-348.md">李飞飞与ImageNet</a></li><li><a href="https://github.com/microsoft/AI-System/blob/main/Textbook/%E7%AC%AC2%E7%AB%A0-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/2.2-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AE%AD%E7%BB%83.md">神经网络的训练</a></li></ol><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="说出你觉得AI领域的最让你震撼的事件："><a href="#说出你觉得AI领域的最让你震撼的事件：" class="headerlink" title="说出你觉得AI领域的最让你震撼的事件："></a>说出你觉得AI领域的最让你震撼的事件：</h3><p>学术界的范式转换：<br>此前，神经网络因计算资源限制和理论瓶颈被冷落多年。AlexNet 的胜利彻底打破了这一僵局，促使研究人员重新聚焦深度网络。随后，VGG、ResNet、Transformer 等模型相继涌现，不断刷新 ImageNet 的性能记录（如 ResNet 将错误率降至 3.57%）。<br>工业界的技术爆发：<br>深度学习迅速渗透到图像识别、语音识别、自然语言处理等领域。例如，Google 将 CNN 用于街景字符识别，准确率提升至 98%；Facebook 利用深度学习优化图像推荐算法，用户活跃度大幅提升。<br>数据与算力的协同进化：<br>ImageNet 项目（由李飞飞主导）提供的 1400 万张标注图像215，与 GPU 加速技术形成良性循环。此后，大规模数据集（如 COCO、SQuAD）和专用芯片（如 TPU）成为 AI 发展的核心驱动力。</p><p>人工智能、机器学习、深度学习、LLM名词之间的关系：<br>AI是让机器具备智能的宏观目标，机器学习是实现 AI 的核心方法（从数据中自动学习规律），深度学习是机器学习的进阶技术（基于多层神经网络自动提取特征），LLM（大型语言模型） 则是深度学习在自然语言处理领域的典型应用（如 GPT-4），四者呈 “包含与递进” 的技术层级关系。</p><h3 id="RNN与CNN的适用场景："><a href="#RNN与CNN的适用场景：" class="headerlink" title="RNN与CNN的适用场景："></a>RNN与CNN的适用场景：</h3><p>RNN 的核心适用场景</p><ol><li>时序序列处理<br>场景：时间序列预测（股票价格、天气数据）、语音识别（音频信号按时间帧输入）。<br>案例：Google 的 WaveNet 用 RNN 生成自然语音，通过捕捉音频帧间的时序依赖还原人声韵律。</li><li>自然语言处理（NLP）<br>场景：机器翻译（如 “我爱中国”→“I love China” 需按语序转换）、文本生成（小说续写、诗歌创作）。<br>案例：早期 GPT-1 基于 TransformerDecoder（含 RNN-like 序列处理逻辑）生成连贯文本。</li><li>序列标注任务<br>场景：分词（“我爱北京” 标注为 “我 &#x2F; 爱 &#x2F; 北京”）、命名实体识别（提取 “张三”“上海” 等实体）。<br>案例：LSTM+CRF 模型在中文分词任务中准确率超 98%。<br>CNN 的核心适用场景</li><li>计算机视觉（CV）<br>场景：图像分类（识别 “猫”“狗”）、目标检测（标注图像中物体位置）、语义分割（像素级分类）。<br>案例：ResNet 在 ImageNet 图像分类中准确率达 96.4%，YOLO 系列模型实时检测视频中的多目标。</li><li>网格结构数据<br>场景：医学影像分析（CT 扫描图中的病灶检测）、卫星遥感图像（农田 &#x2F; 城市区域分割）。<br>案例：U-Net 网络用 CNN 提取医学图像的多尺度特征，精准分割肿瘤区域。</li><li>视频与时空数据<br>场景：动作识别（视频中 “跑步”“挥手” 动作分类）、视频生成（如 DeepMind 的 VideoGPT）。<br>技术逻辑：三维 CNN 同时处理空间（帧内像素）和时间（帧间运动）维度，如 C3D 模型用于视频动作理解。</li></ol><p>总结<br>CNN 用于处理结构化&#x2F;空间数据，尤其是图像、短文本。</p><p>RNN 擅长处理顺序相关、时间依赖信息。</p><h3 id="附加题（选做）"><a href="#附加题（选做）" class="headerlink" title="附加题（选做）"></a>附加题（选做）</h3><h4 id="运行下面这段代码（建一个项目文件夹，然后放到main-py里）："><a href="#运行下面这段代码（建一个项目文件夹，然后放到main-py里）：" class="headerlink" title="运行下面这段代码（建一个项目文件夹，然后放到main.py里）："></a>运行下面这段代码（建一个项目文件夹，然后放到main.py里）：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> transforms<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br> <br> <br><span class="hljs-comment"># 使用设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br> <br> <br><span class="hljs-comment"># 模型定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNNModel</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(CNNModel, <span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-variable language_">self</span>.network = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>            nn.ReLU(),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span> * <span class="hljs-number">7</span> * <span class="hljs-number">7</span>, <span class="hljs-number">128</span>),<br>            nn.ReLU(),<br>            nn.Dropout(<span class="hljs-number">0.5</span>),<br>            nn.Linear(<span class="hljs-number">128</span>, <span class="hljs-number">10</span>),<br>        )<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.network(x)<br> <br> <br><span class="hljs-comment"># 通用数据加载器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    transform = transforms.Compose(<br>        [transforms.ToTensor(), transforms.Normalize((<span class="hljs-number">0.1307</span>,), (<span class="hljs-number">0.3081</span>,))]<br>    )<br>    train_dataset = torchvision.datasets.MNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=transform, download=<span class="hljs-literal">True</span><br>    )<br>    test_dataset = torchvision.datasets.MNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=transform, download=<span class="hljs-literal">True</span><br>    )<br> <br>    train_loader = DataLoader(train_dataset, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)<br>    test_loader = DataLoader(test_dataset, batch_size=<span class="hljs-number">1000</span>, shuffle=<span class="hljs-literal">False</span>)<br> <br>    <span class="hljs-keyword">return</span> train_loader, test_loader<br> <br> <br><span class="hljs-comment"># 训练函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_model</span>():<br>    train_loader, test_loader = load_data()<br>    model = CNNModel().to(device)<br>    criterion = nn.CrossEntropyLoss()<br>    optimizer = optim.Adam(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br> <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开始训练模型...&quot;</span>)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        model.train()<br>        running_loss = <span class="hljs-number">0.0</span><br>        <span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> train_loader:<br>            images, labels = images.to(device), labels.to(device)<br>            outputs = model(images)<br>            loss = criterion(outputs, labels)<br> <br>            optimizer.zero_grad()<br>            loss.backward()<br>            optimizer.step()<br>            running_loss += loss.item()<br> <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Epoch <span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>, Loss: <span class="hljs-subst">&#123;running_loss/<span class="hljs-built_in">len</span>(train_loader):<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br> <br>    <span class="hljs-comment"># 保存模型</span><br>    torch.save(model.state_dict(), <span class="hljs-string">&quot;cnn_model.pth&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存为 cnn_model.pth&quot;</span>)<br> <br> <br><span class="hljs-comment"># 推理函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>():<br>    _, test_loader = load_data()<br>    model = CNNModel().to(device)<br> <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;cnn_model.pth&quot;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型文件 cnn_model.pth 不存在，请先训练模型&quot;</span>)<br>        <span class="hljs-keyword">return</span><br> <br>    model.load_state_dict(torch.load(<span class="hljs-string">&quot;cnn_model.pth&quot;</span>, map_location=device))<br>    model.<span class="hljs-built_in">eval</span>()<br> <br>    correct = <span class="hljs-number">0</span><br>    total = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> images, labels <span class="hljs-keyword">in</span> test_loader:<br>            images, labels = images.to(device), labels.to(device)<br>            outputs = model(images)<br>            _, predicted = torch.<span class="hljs-built_in">max</span>(outputs, <span class="hljs-number">1</span>)<br>            total += labels.size(<span class="hljs-number">0</span>)<br>            correct += (predicted == labels).<span class="hljs-built_in">sum</span>().item()<br> <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;测试集准确率: <span class="hljs-subst">&#123;<span class="hljs-number">100</span> * correct / total:<span class="hljs-number">.2</span>f&#125;</span>%&quot;</span>)<br> <br>    <span class="hljs-comment"># 可视化前 5 张</span><br>    batch_idx, (example_data, example_targets) = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">enumerate</span>(test_loader))<br>    example_data = example_data.to(device)<br>    outputs = model(example_data)<br>    _, preds = torch.<span class="hljs-built_in">max</span>(outputs, <span class="hljs-number">1</span>)<br> <br>    plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, i + <span class="hljs-number">1</span>)<br>        plt.imshow(example_data[i].cpu().squeeze(), cmap=<span class="hljs-string">&quot;gray&quot;</span>)<br>        plt.title(<span class="hljs-string">f&quot;Pred: <span class="hljs-subst">&#123;preds[i].item()&#125;</span>&quot;</span>)<br>        plt.axis(<span class="hljs-string">&quot;off&quot;</span>)<br>    plt.show()<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recognize</span>(<span class="hljs-params">image_path</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;cnn_model.pth&quot;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型文件 cnn_model.pth 不存在，请先训练模型&quot;</span>)<br>        <span class="hljs-keyword">return</span><br> <br>    model = CNNModel().to(device)<br>    model.load_state_dict(torch.load(<span class="hljs-string">&quot;cnn_model.pth&quot;</span>, map_location=device))<br>    model.<span class="hljs-built_in">eval</span>()<br> <br>    transform = transforms.Compose(<br>        [<br>            transforms.Grayscale(),  <span class="hljs-comment"># 确保是单通道</span><br>            transforms.Resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>)),  <span class="hljs-comment"># 调整大小</span><br>            transforms.ToTensor(),<br>            transforms.Normalize((<span class="hljs-number">0.1307</span>,), (<span class="hljs-number">0.3081</span>,)),<br>        ]<br>    )<br> <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始识别图片 <span class="hljs-subst">&#123;image_path&#125;</span>&quot;</span>)<br>        image = Image.<span class="hljs-built_in">open</span>(image_path)<br>        image = transform(image).unsqueeze(<span class="hljs-number">0</span>).to(device)<br> <br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            output = model(image)<br>            _, pred = torch.<span class="hljs-built_in">max</span>(output, <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;图片 <span class="hljs-subst">&#123;image_path&#125;</span> 的预测结果是：<span class="hljs-subst">&#123;pred.item()&#125;</span>&quot;</span>)<br> <br>        plt.imshow(image.squeeze().cpu(), cmap=<span class="hljs-string">&quot;gray&quot;</span>)<br>        plt.title(<span class="hljs-string">f&quot;Predicted: <span class="hljs-subst">&#123;pred.item()&#125;</span>&quot;</span>)<br>        plt.axis(<span class="hljs-string">&quot;off&quot;</span>)<br>        plt.show()<br> <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;识别图片失败：<span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br> <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">train:</span><br><span class="hljs-string">python main.py train</span><br><span class="hljs-string"> </span><br><span class="hljs-string">predict:</span><br><span class="hljs-string">python main.py predict</span><br><span class="hljs-string"> </span><br><span class="hljs-string">recognize:</span><br><span class="hljs-string">python main.py recognize --image test_2.png</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br> <br><span class="hljs-comment"># CNN 可视化文档： https://poloclub.github.io/cnn-explainer/</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;手写数字识别 CNN 模型&quot;</span>)<br>    subparsers = parser.add_subparsers(dest=<span class="hljs-string">&quot;mode&quot;</span>, required=<span class="hljs-literal">True</span>)<br> <br>    parser_train = subparsers.add_parser(<span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;训练模型&quot;</span>)<br>    parser_predict = subparsers.add_parser(<span class="hljs-string">&quot;predict&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;评估模型&quot;</span>)<br>    parser_recognize = subparsers.add_parser(<span class="hljs-string">&quot;recognize&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;识别本地图片&quot;</span>)<br>    parser_recognize.add_argument(<span class="hljs-string">&quot;--image&quot;</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;要识别的图片路径&quot;</span>)<br> <br>    args = parser.parse_args()<br> <br>    <span class="hljs-keyword">if</span> args.mode == <span class="hljs-string">&quot;train&quot;</span>:<br>        train_model()<br>    <span class="hljs-keyword">elif</span> args.mode == <span class="hljs-string">&quot;predict&quot;</span>:<br>        predict()<br>    <span class="hljs-keyword">elif</span> args.mode == <span class="hljs-string">&quot;recognize&quot;</span>:<br>        recognize(args.image)<br><br></code></pre></td></tr></table></figure><h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><h5 id="1-运行起来，然后识别这张图片，参考命令："><a href="#1-运行起来，然后识别这张图片，参考命令：" class="headerlink" title="1. 运行起来，然后识别这张图片，参考命令："></a>1. 运行起来，然后识别这张图片，参考命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python main.py recognize --image test_2.png<br></code></pre></td></tr></table></figure><p><img src="/2025/06/26/night-before-the-big-model/image2.png"><br><img src="/2025/06/26/night-before-the-big-model/image.png"></p><h5 id="2-解释一下：为什么模型定义里最后一个线性层的维度-nn-Linear-128-10"><a href="#2-解释一下：为什么模型定义里最后一个线性层的维度-nn-Linear-128-10" class="headerlink" title="2. 解释一下：为什么模型定义里最后一个线性层的维度 nn.Linear(128, 10)"></a>2. 解释一下：为什么模型定义里最后一个线性层的维度 nn.Linear(128, 10)</h5><p>在这个模型里，最后一个全连接层（nn.Linear(128, 10)）的两个维度分别对应：</p><p>输入维度 128<br>紧接在它前面的那一层是：</p><p>nn.Linear(64 * 7 * 7, 128) nn.ReLU() nn.Dropout(0.5)<br>所以它会输出一个长度为 128 的特征向量，作为下一层的输入大小  。</p><p>输出维度 10<br>这是因为这个网络是用来做 MNIST 手写数字分类 的，而 MNIST 一共有 10 个类别（数字 0–9）。<br>最后一层输出 10 个数值（logits），每个数值对应一个类别的“得分”。训练时再配合 CrossEntropyLoss，它会把这 10 个分数转换成一个概率分布，并计算与真实标签之间的损失。</p><p>简单来说，nn.Linear(128, 10) 就是把前一层学到的 128 维特征，映射成 10 个分类得分，从而完成 “特征 → 类别” 的转换。</p>]]></content>
    
    
    <categories>
      
      <category>AI大模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安装 DM8</title>
    <link href="/2025/01/23/docker-install-dm8/"/>
    <url>/2025/01/23/docker-install-dm8/</url>
    
    <content type="html"><![CDATA[<p>使用Docker安装DM8</p><span id="more"></span><p><a href="https://eco.dameng.com/document/dm/zh-cn/start/dm-install-docker.html">Docker安装 | 达梦技术文档</a></p><p>Docker安装<br>安装前准备<br>软硬件版本<br>终端X86-64 架构<br>Docker2023 年 6 月版</p><h3 id="下载-Docker-安装包"><a href="#下载-Docker-安装包" class="headerlink" title="下载 Docker 安装包"></a>下载 Docker 安装包</h3><p>请在达梦数据库官网下载 <a href="https://eco.dameng.com/download/">Docker 安装包</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://download.dameng.com/eco/dm8/dm8_20241230_x86_rh6_64_rq_single.tar<br></code></pre></td></tr></table></figure><h3 id="导入安装包"><a href="#导入安装包" class="headerlink" title="导入安装包"></a>导入安装包</h3><p>拷贝安装包到 &#x2F;opt 目录下，执行以下命令导入安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker load -i dm8_20230808_rev197096_x86_rh6_64_single.tar<br></code></pre></td></tr></table></figure><p>导入完成后，可以使用 docker images 查看导入的镜像。</p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>镜像导入后，使用 docker run 启动容器，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 30236:5236 --restart=always --name dm8_test --privileged=<span class="hljs-literal">true</span> -e PAGE_SIZE=16 -e LD_LIBRARY_PATH=/opt/dmdbms/bin -e  EXTENT_SIZE=32 -e BLANK_PAD_MODE=1 -e LOG_SIZE=1024 -e UNICODE_FLAG=1 -e LENGTH_IN_CHAR=1 -e INSTANCE_NAME=dm8_test -v /data/dm8_test:/opt/dmdbms/data dm8:dm8_20241230_rev255012_x86_rh6_64<br></code></pre></td></tr></table></figure><p>容器启动完成后，使用 docker ps 查看镜像的启动情况。</p><p>启动完成后，可通过日志检查启动情况，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f  dm8_test<br>或<br>docker logs -f 58deb28d1209<br></code></pre></td></tr></table></figure><h3 id="启动-停止数据库"><a href="#启动-停止数据库" class="headerlink" title="启动&#x2F;停止数据库"></a>启动&#x2F;停止数据库</h3><p>停止数据库命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop  dm8_test<br></code></pre></td></tr></table></figure><p>启动数据库命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start  dm8_test<br></code></pre></td></tr></table></figure><p>重启命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart  dm8_test<br></code></pre></td></tr></table></figure><p>通过以下命令可以查看 Docker 镜像中数据库初始化的参数。（包括SYSDBA密码SYSDBA_PWD）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect dm8_test<br></code></pre></td></tr></table></figure><blockquote><p>注意<br>1.如果使用 docker 容器里面的 disql，进入容器后，先执行 source &#x2F;etc&#x2F;profile 防止中文乱码。<br>2.新版本 Docker 镜像中数据库默认用户名&#x2F;密码为 SYSDBA&#x2F;SYSDBA001或者SYSDBA&#x2F;SYSDBA_dm001</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>DM8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计范式</title>
    <link href="/2024/08/29/database-normal-form/"/>
    <url>/2024/08/29/database-normal-form/</url>
    
    <content type="html"><![CDATA[<p>数据库设计的三范式</p><span id="more"></span><h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>你要试图搞清楚1NF、2NF、3NF的规范含义；<br>你要试图找到一种范式与非范式之间的平衡应用与日常开发。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定以下数据表，参考数据库设计范式进行结构优化，可以输出ER图或者表定义都行</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> Orders (<br>    order_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,                    <span class="hljs-comment">-- 订单ID</span><br>    customer_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),                  <span class="hljs-comment">-- 客户名称</span><br>    customer_address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),               <span class="hljs-comment">-- 客户地址</span><br>    order_date DATETIME,                         <span class="hljs-comment">-- 订单日期</span><br>    product_id <span class="hljs-type">INT</span>,                              <span class="hljs-comment">-- 产品ID</span><br>    product_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),                   <span class="hljs-comment">-- 产品名称</span><br>    quantity <span class="hljs-type">INT</span>,                                <span class="hljs-comment">-- 数量</span><br>    unit_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),                   <span class="hljs-comment">-- 单价</span><br>    total_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),                  <span class="hljs-comment">-- 总价</span><br>    sales_rep_id <span class="hljs-type">INT</span>,                            <span class="hljs-comment">-- 销售代表ID</span><br>    sales_rep_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),                 <span class="hljs-comment">-- 销售代表名称</span><br>    sales_rep_phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),                 <span class="hljs-comment">-- 销售代表电话</span><br>    delivery_date DATETIME,                      <span class="hljs-comment">-- 交货日期</span><br>    payment_method <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),                  <span class="hljs-comment">-- 支付方式</span><br>    payment_status <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)                   <span class="hljs-comment">-- 支付状态</span><br>);<br></code></pre></td></tr></table></figure><h3 id="表数据例子"><a href="#表数据例子" class="headerlink" title="表数据例子"></a>表数据例子</h3> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> order_id </span>|<span class="hljs-string"> customer_name </span>|<span class="hljs-string"> customer_address </span>|<span class="hljs-string"> order_date          </span>|<span class="hljs-string"> product_id </span>|<span class="hljs-string"> product_name </span>|<span class="hljs-string"> quantity </span>|<span class="hljs-string"> unit_price </span>|<span class="hljs-string"> total_price </span>|<span class="hljs-string"> sales_rep_id </span>|<span class="hljs-string"> sales_rep_name </span>|<span class="hljs-string"> sales_rep_phone </span>|<span class="hljs-string"> delivery_date      </span>|<span class="hljs-string"> payment_method </span>|<span class="hljs-string"> payment_status </span>|<br>|<span class="hljs-string">----------</span>|<span class="hljs-string">---------------</span>|<span class="hljs-string">------------------</span>|<span class="hljs-string">---------------------</span>|<span class="hljs-string">------------</span>|<span class="hljs-string">--------------</span>|<span class="hljs-string">----------</span>|<span class="hljs-string">------------</span>|<span class="hljs-string">-------------</span>|<span class="hljs-string">--------------</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">-----------------</span>|<span class="hljs-string">--------------------</span>|<span class="hljs-string">----------------</span>|<span class="hljs-string">----------------</span>|<br>|<span class="hljs-string"> 1        </span>|<span class="hljs-string"> A     </span>|<span class="hljs-string"> 华盛顿特区宾夕法尼亚大道1600号 </span>|<span class="hljs-string"> 2023-08-01 14:00:00   </span>|<span class="hljs-string"> 101      </span>|<span class="hljs-string"> 笔记本电脑 </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 800.00 </span>|<span class="hljs-string"> 1600.00 </span>|<span class="hljs-string"> 1            </span>|<span class="hljs-string">  D         </span>|<span class="hljs-string"> 11111111     </span>|<span class="hljs-string"> 2023-08-05 09:00:00   </span>|<span class="hljs-string"> 信用卡       </span>|<span class="hljs-string"> 已支付   </span>|<br>|<span class="hljs-string"> 2        </span>|<span class="hljs-string"> B   </span>|<span class="hljs-string"> 唐宁街10号 </span>|<span class="hljs-string"> 2023-08-03 16:30:00 </span>|<span class="hljs-string"> 102      </span>|<span class="hljs-string"> 智能手机   </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 600.00 </span>|<span class="hljs-string"> 600.00  </span>|<span class="hljs-string"> 2            </span>|<span class="hljs-string">  E       </span>|<span class="hljs-string"> 22222222     </span>|<span class="hljs-string"> 2023-08-07 10:00:00   </span>|<span class="hljs-string"> 支付宝       </span>|<span class="hljs-string"> 待支付   </span>|<br>|<span class="hljs-string"> 3        </span>|<span class="hljs-string"> A    </span>|<span class="hljs-string"> 华盛顿特区宾夕法尼亚大道1600号 </span>|<span class="hljs-string"> 2023-08-02 12:15:00   </span>|<span class="hljs-string"> 103      </span>|<span class="hljs-string"> 平板电脑   </span>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> 200.00 </span>|<span class="hljs-string"> 600.00  </span>|<span class="hljs-string"> 1            </span>|<span class="hljs-string">  D         </span>|<span class="hljs-string"> 11111111     </span>|<span class="hljs-string"> 2023-08-06 11:00:00   </span>|<span class="hljs-string"> 信用卡       </span>|<span class="hljs-string"> 已支付   </span>|<br>|<span class="hljs-string"> 4        </span>|<span class="hljs-string"> C   </span>|<span class="hljs-string"> 永田町2丁目3-1 </span>|<span class="hljs-string"> 2023-08-04 11:00:00 </span>|<span class="hljs-string"> 101      </span>|<span class="hljs-string"> 笔记本电脑 </span>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> 800.00 </span>|<span class="hljs-string"> 800.00  </span>|<span class="hljs-string"> 2            </span>|<span class="hljs-string">  E      </span>|<span class="hljs-string"> 22222222     </span>|<span class="hljs-string"> 2023-08-08 13:00:00   </span>|<span class="hljs-string"> 银行转账     </span>|<span class="hljs-string"> 已支付   </span>|<br>|<span class="hljs-string"> 5        </span>|<span class="hljs-string"> A    </span>|<span class="hljs-string"> 华盛顿特区宾夕法尼亚大道1600号 </span>|<span class="hljs-string"> 2023-08-05 14:30:00   </span>|<span class="hljs-string"> 104      </span>|<span class="hljs-string"> 显示器     </span>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> 150.00 </span>|<span class="hljs-string"> 300.00  </span>|<span class="hljs-string"> 1            </span>|<span class="hljs-string">  D        </span>|<span class="hljs-string"> 11111111     </span>|<span class="hljs-string"> 2023-08-09 09:30:00   </span>|<span class="hljs-string"> 信用卡       </span>|<span class="hljs-string"> 已支付   </span>|<br></code></pre></td></tr></table></figure><p>1NF、2NF、3NF的规范含义：</p><ol><li>第一范式（1NF）：</li></ol><p>所有的域都必须是原子性的，不可分割的。即表中的每一列必须是原子数据项，而不是集合、数组、记录等非原子数据项。如果某一列的值包含多个元素，则需要将其拆分为多个列，以满足 1NF 的要求。<br>关键点：无重复的域，表中的每个字段值都是不可分割的。<br>2. 第二范式（2NF）：</p><p>在满足 1NF 的基础上，所有非主属性必须完全依赖于主键，即不存在部分依赖。部分依赖指的是某些非主属性只依赖于主键的一部分，而不是整个主键。为了消除这种部分依赖，通常需要将表拆分为更小的子表，使得每个子表中的非主属性完全依赖于主键。<br>关键点：消除部分依赖，确保每个非主属性完全依赖于主键。<br>3. 第三范式（3NF）：</p><p>在满足 2NF 的基础上，所有非主属性不能依赖于其他非主属性，即不存在传递依赖。传递依赖指的是非主属性依赖于另一个非主属性，而后者又依赖于主键。为消除传递依赖，通常需要将相关的非主属性移到一个新的表中。<br>关键点：消除传递依赖，确保非主属性只依赖于主键。</p><p>结构优化：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> Customer (<br><br>customer_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>, <span class="hljs-comment">-- 客户ID</span><br><br>customer_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>), <span class="hljs-comment">-- 客户名称</span><br><br>customer_address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-comment">-- 客户地址</span><br><br>);<br><br><span class="hljs-keyword">CREATE TABLE</span> Product (<br><br>product_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>, <span class="hljs-comment">-- 产品ID</span><br><br>product_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>), <span class="hljs-comment">-- 产品名称</span><br><br>unit_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">-- 单价</span><br><br>);<br><br><span class="hljs-keyword">CREATE TABLE</span> SalesRep (<br><br>sales_rep_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>, <span class="hljs-comment">-- 销售代表ID</span><br><br>sales_rep_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>), <span class="hljs-comment">-- 销售代表名称</span><br><br>sales_rep_phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-comment">-- 销售代表电话</span><br><br>);<br><br><span class="hljs-keyword">CREATE TABLE</span> `<span class="hljs-keyword">Order</span>` (<br><br>order_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>, <span class="hljs-comment">-- 订单ID</span><br><br>customer_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 客户ID (外键)</span><br><br>order_date DATETIME, <span class="hljs-comment">-- 订单日期</span><br><br>delivery_date DATETIME, <span class="hljs-comment">-- 交货日期</span><br><br>payment_method <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 支付方式</span><br><br>payment_status <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>), <span class="hljs-comment">-- 支付状态</span><br><br><span class="hljs-keyword">FOREIGN KEY</span> (customer_id) <span class="hljs-keyword">REFERENCES</span> Customer(customer_id)<br><br>);<br><br><span class="hljs-keyword">CREATE TABLE</span> OrderDetail (<br><br>order_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 订单ID (外键)</span><br><br>product_id <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 产品ID (外键)</span><br><br>quantity <span class="hljs-type">INT</span>, <span class="hljs-comment">-- 数量</span><br><br>total_price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>), <span class="hljs-comment">-- 总价</span><br><br><span class="hljs-keyword">PRIMARY KEY</span> (order_id, product_id), <span class="hljs-comment">-- 复合主键</span><br><br><span class="hljs-keyword">FOREIGN KEY</span> (order_id) <span class="hljs-keyword">REFERENCES</span> `<span class="hljs-keyword">Order</span>`(order_id),<br><br><span class="hljs-keyword">FOREIGN KEY</span> (product_id) <span class="hljs-keyword">REFERENCES</span> Product(product_id)<br><br>);<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://xie.infoq.cn/article/e63302aa25e96b6985c295c9a?utm_campaign=geektime_search&utm_content=geektime_search&utm_medium=geektime_search&utm_source=geektime_search&utm_term=geektime_search">https://xie.infoq.cn/article/e63302aa25e96b6985c295c9a?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search</a><br><a href="https://www.gatlin.io/content/database-normalization">https://www.gatlin.io/content/database-normalization</a><br><a href="https://dbgroup.cs.tsinghua.edu.cn/ligl/courses/slides03.pdf%EF%BC%8Chttps://www.bilibili.com/video/BV15u4y1Q71R/?p=3&vd_source=2558b7e1b8fac6da441bcddd415cbd0d">https://dbgroup.cs.tsinghua.edu.cn/ligl/courses/slides03.pdf，https://www.bilibili.com/video/BV15u4y1Q71R/?p=3&amp;vd_source=2558b7e1b8fac6da441bcddd415cbd0d</a> （偏学术性的）<br><a href="https://highscalability.com/the-mother-of-all-database-normalization-debates-on-coding-h">https://highscalability.com/the-mother-of-all-database-normalization-debates-on-coding-h</a>  （范式与非范式的一些观点总结）  </p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 升级后不兼容问题处理</title>
    <link href="/2024/08/09/docer-incompatible-after-upgrade/"/>
    <url>/2024/08/09/docer-incompatible-after-upgrade/</url>
    
    <content type="html"><![CDATA[<p>Docker升级后不兼容问题处理</p><span id="more"></span><p><img src="/2024/08/09/docer-incompatible-after-upgrade/image.png" alt="升级后不兼容报错"></p><h4 id="更改-var-lib-docker-containers目录中的文件参数，把docker-runc替换为runc"><a href="#更改-var-lib-docker-containers目录中的文件参数，把docker-runc替换为runc" class="headerlink" title="更改&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers目录中的文件参数，把docker-runc替换为runc"></a>更改&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers目录中的文件参数，把docker-runc替换为runc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -rl <span class="hljs-string">&#x27;docker-runc&#x27;</span> /var/lib/docker/containers/ | xargs sed -i <span class="hljs-string">&#x27;s/docker-runc/runc/g&#x27;</span><br><br>systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO trace</title>
    <link href="/2024/06/28/go-trace/"/>
    <url>/2024/06/28/go-trace/</url>
    
    <content type="html"><![CDATA[<p>[GO] trace 使用</p><span id="more"></span><h3 id="1、请使用-runtime-trace-包，写一个使用trace的例子"><a href="#1、请使用-runtime-trace-包，写一个使用trace的例子" class="headerlink" title="1、请使用 runtime&#x2F;trace 包，写一个使用trace的例子"></a>1、请使用 runtime&#x2F;trace 包，写一个使用trace的例子</h3><ul><li>代码案例</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>    <span class="hljs-string">&quot;runtime/trace&quot;</span><br>    <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个跟踪文件</span><br>    f, err := os.Create(<span class="hljs-string">&quot;trace.out&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> f.Close()<br><br>    <span class="hljs-comment">// 启动跟踪，将数据写入 trace.out 文件</span><br>    <span class="hljs-keyword">if</span> err := trace.Start(f); err != <span class="hljs-literal">nil</span> &#123;<br>        log.Fatal(err)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> trace.Stop()<br><br>    <span class="hljs-comment">// 模拟一些操作</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>        <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-keyword">for</span> &#123;<br>                <span class="hljs-comment">// 模拟一些计算</span><br>                time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)<br>            &#125;<br>        &#125;()<br>    &#125;<br><br>    <span class="hljs-comment">// 让主 goroutine 运行一段时间</span><br>    time.Sleep(<span class="hljs-number">5</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>go tool trace trace.out 打开页面，分析内容</li></ul><p><img src="/2024/06/28/go-trace/image.png" alt="go trace面板"></p><h3 id="2、请描述-runtime-trace-包的使用场景"><a href="#2、请描述-runtime-trace-包的使用场景" class="headerlink" title="2、请描述 runtime&#x2F;trace 包的使用场景"></a>2、请描述 runtime&#x2F;trace 包的使用场景</h3><p>trace可以进行性能分析和调试的工具，适用于处理复杂并发问题和实时系统中的性能监控，比如某些函数可能执行速度较慢，通过 trace，可以找出这些函数，并进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GO 代码安全指南</title>
    <link href="/2024/04/25/go-code-security/"/>
    <url>/2024/04/25/go-code-security/</url>
    
    <content type="html"><![CDATA[<p>[GO] 代码安全指南</p><span id="more"></span><p><a href="https://github.com/Tencent/secguide/blob/main/Go%E5%AE%89%E5%85%A8%E6%8C%87%E5%8D%97.md">GO代码安全指南</a></p><p>题目：<br>请选取 top3 除（1.1内容），作为你觉得对于我们重要的点，并说明原因。</p><h2 id="TOP1"><a href="#TOP1" class="headerlink" title="TOP1"></a>TOP1</h2><p>1.1.2【必须】nil指针判断<br>进行指针操作时，必须判断该指针是否为nil，防止程序panic，尤其在进行结构体Unmarshal时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Packet <span class="hljs-keyword">struct</span> &#123;<br>PackeyType    <span class="hljs-type">uint8</span><br>PackeyVersion <span class="hljs-type">uint8</span><br>Data          *Data<br>&#125;<br><br><span class="hljs-keyword">type</span> Data <span class="hljs-keyword">struct</span> &#123;<br>Stat <span class="hljs-type">uint8</span><br>Len  <span class="hljs-type">uint8</span><br>Buf  [<span class="hljs-number">8</span>]<span class="hljs-type">byte</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Packet)</span></span> UnmarshalBinary(b []<span class="hljs-type">byte</span>) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b) &lt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> io.EOF<br>&#125;<br><br>p.PackeyType = b[<span class="hljs-number">0</span>]<br>p.PackeyVersion = b[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">// 若长度等于2，那么不会new Data</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b) &gt; <span class="hljs-number">2</span> &#123;<br>p.Data = <span class="hljs-built_in">new</span>(Data)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// bad: 未判断指针是否为nil</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>packet := <span class="hljs-built_in">new</span>(Packet)<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> err := packet.UnmarshalBinary(data); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Failed to unmarshal packet&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;Stat: %v\n&quot;</span>, packet.Data.Stat)<br>&#125;<br><br><span class="hljs-comment">// good: 判断Data指针是否为nil</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>packet := <span class="hljs-built_in">new</span>(Packet)<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">if</span> err := packet.UnmarshalBinary(data); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Failed to unmarshal packet&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-keyword">if</span> packet.Data == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;Stat: %v\n&quot;</span>, packet.Data.Stat)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>原因：<br>1、如果一个指针变量没有被显式地初始化为某个值，那么它的默认值将为 nil。在对这样的指针进行解引用操作时，会导致空指针解引用错误。<br>2、在解析 JSON 或 XML 数据并将其映射到结构体时，如果目标结构体中的字段是指针类型，并且 JSON 或 XML 中没有对应的字段，那么这些字段的值将会被解析为 nil</p></blockquote><h2 id="TOP2"><a href="#TOP2" class="headerlink" title="TOP2"></a>TOP2</h2><p>1.1.7【必须】确保每个协程都能退出<br>启动一个协程就会做一个入栈操作，在系统不退出的情况下，协程也没有设置退出条件，则相当于协程失去了控制，它占用的资源无法回收，可能会导致内存泄露。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// bad: 协程没有设置退出条件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doWaiter</span><span class="hljs-params">(name <span class="hljs-type">string</span>, second <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>time.Sleep(time.Duration(second) * time.Second)<br>fmt.Println(name, <span class="hljs-string">&quot; is ready!&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>原因：<br>1、可能会导致内存泄漏或程序阻塞的情况发生<br> 退出方式：<br>使用通道（channel）：通过通道来进行协程之间的通信，当某个条件满足时，向通道发送信号，让协程退出。<br>使用上下文（context）：通过上下文来控制协程的生命周期，当上下文被取消或超时时，协程会收到通知并退出。<br>使用 select 语句：在协程中使用 select 语句监听多个通道，当某个通道关闭或有数据时，执行相应的操作退出协程。 </p></blockquote><h2 id="TOP3"><a href="#TOP3" class="headerlink" title="TOP3"></a>TOP3</h2><p>1.1.9【推荐】不使用slice作为函数入参<br>slice在作为函数入参时，函数内对slice的修改可能会影响原始数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// bad</span><br> <span class="hljs-comment">// slice作为函数入参时包含原始数组指针</span><br> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">modify</span><span class="hljs-params">(array []<span class="hljs-type">int</span>)</span></span> &#123;<br>     array[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span> <span class="hljs-comment">// 对入参slice的元素修改会影响原始数据</span><br> &#125;<br> <br> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     array := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br> <br>     modify(array)<br>     fmt.Println(array) <span class="hljs-comment">// output：[10 2 3 4 5]</span><br> &#125;<br><br> <span class="hljs-comment">// good</span><br> <span class="hljs-comment">// 数组作为函数入参，而不是slice</span><br> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">modify</span><span class="hljs-params">(array [5]<span class="hljs-type">int</span>)</span></span> &#123;<br>   array[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br> &#125;<br><br> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-comment">// 传入数组，注意数组与slice的区别</span><br>     array := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br> <br>     modify(array)<br>     fmt.Println(array)<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>原因：<br>1、slice是引用类型，如果函数对传入的 slice 进行原地修改，那么调用函数的地方的原始数据也会被修改<br>2、当同一个 slice 作为多个函数的入参时，如果其中一个函数修改了 slice 的内容，那么其他函数可能会受到影响，造成不一致的结果。<br>建议：通常推荐将 slice 视为只读的数据结构，并使用函数的返回值来传递修改后的数据。如果函数需要修改 slice 的内容，可以创建一个新的 slice，并将修改后的数据返回给调用方。这样可以确保函数的行为更加可预测，减少副作用，并提高代码的可维护性</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 安装 DB2</title>
    <link href="/2024/04/02/docker-install-db2/"/>
    <url>/2024/04/02/docker-install-db2/</url>
    
    <content type="html"><![CDATA[<p>使用Docker安装DB2</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull ibmcom/db2<br><br>docker run -d -p 50000:50000 --name db2 --privileged=<span class="hljs-literal">true</span> -e DB2INST1_PASSWORD=actionsky   -e DBNAME=wanghc -e LICENSE=accept -v /usr/local/db2:/database ibmcom/db2<br><br>docker logs -f db2<br></code></pre></td></tr></table></figure><p><img src="/2024/04/02/docker-install-db2/image.png" alt="连接信息"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>DB2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1998/12/12/hello-world/"/>
    <url>/1998/12/12/hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="你好，世界！"><a href="#你好，世界！" class="headerlink" title="你好，世界！"></a>你好，世界！</h3>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
